<!--
  ~  Copyright (C) 2019 Alpha Jiang. All rights reserved.
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.alphajiang.hyena.ds.mapper.PointRecLogMapper">

    <insert id="addPointRecLog" useGeneratedKeys="true" keyProperty="recLog.id" keyColumn="id">
        insert into `${tableName}` set
        `pid` = #{recLog.pid},
        `seqNum` = #{recLog.seqNum},
        `recId` = #{recLog.recId},
        `type` = #{recLog.type},
        `delta` = #{recLog.delta},
        `deltaCost` = #{recLog.deltaCost},
        `available` = #{recLog.available},
        `used` = #{recLog.used},
        `frozen` = #{recLog.frozen},
        `refund` = #{recLog.refund},
        `cancelled` = #{recLog.cancelled},
        `expire` = #{recLog.expire},
        `cost` = #{recLog.cost},
        `frozenCost` = #{recLog.frozenCost},
        `usedCost` = #{recLog.usedCost},
        `refundCost` = #{recLog.refundCost},
        <if test="recLog.sourceType != null">
            `sourceType` = #{recLog.sourceType},
        </if>
        <if test="recLog.orderType != null">
            `orderType` = #{recLog.orderType},
        </if>
        <if test="recLog.payType != null">
            `payType` = #{recLog.payType},
        </if>
        `note` = #{recLog.note}
    </insert>

    <insert id="batchInsert">
        insert into `${tableName}` (`pid`, `seqNum`, recId, `type`,
        delta, deltaCost,
        available, used, frozen, refund,
        cancelled, expire,
        `cost`, `frozenCost`, usedCost, refundCost,
        `sourceType`,
        `orderType`,
        `payType`,
        `note`)
        <foreach item="recLog" collection="recLogs"
                 open="values (" separator="),(" close=")">
            #{recLog.pid}, #{recLog.seqNum}, #{recLog.recId}, #{recLog.type},
            #{recLog.delta}, #{recLog.deltaCost},
            #{recLog.available}, #{recLog.used}, #{recLog.frozen}, #{recLog.refund},
            #{recLog.cancelled}, #{recLog.expire},
            #{recLog.cost}, #{recLog.frozenCost}, #{recLog.usedCost}, #{recLog.refundCost},
            #{recLog.sourceType},
            #{recLog.orderType},
            #{recLog.payType},
            #{recLog.note}
        </foreach>
    </insert>


    <select id="listPointRecLog" resultType="io.github.alphajiang.hyena.model.dto.PointRecLogDto">
        select log.*, p.uid as uid, rec.total as total,
        rec.`orderNo` as recOrigOrderNo,
        pLog.orderNo as orderNo
        from `${pointTableName}_rec_log` as log
        left join `${pointTableName}_rec` as rec on rec.id = log.recId
        left join `${pointTableName}` as p on rec.pid = p.id
        left join `${pointTableName}_log` as pLog on log.seqNum = pLog.seqNum
        and log.pid = pLog.pid and pLog.`type` = `log`.`type`
        where 1=1
        <if test="param.pid &gt; 0">
            and p.id = #{param.pid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.uid )">
            and p.uid = #{param.uid}
        </if>
        <if test="param.subUid != null">
            and p.subUid = #{param.subUid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.seqNumList )">
            <foreach item="seqNum" collection="param.seqNumList"
                     open="and log.seqNum in (" separator="," close=") ">
                #{seqNum}
            </foreach>
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.recIdList )">
            <foreach item="recId" collection="param.recIdList"
                     open="and log.recId in (" separator="," close=") ">
                #{recId}
            </foreach>
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.tag )">
            and rec.tag = #{param.tag}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.orderNoList )">
            <foreach item="orderNo" collection="param.orderNoList"
                     open="and pLog.orderNo in (" separator="," close=") ">
                #{orderNo}
            </foreach>
        </if>
        <if test="param.enable != null">
            and rec.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + param.sk + '%'"/>
            and (
            rec.tag like #{pattern}
            )
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.sorts )">
            <foreach item="sort" collection="param.sorts"
                     open="order by" separator="," close=" ">
                ${sort.columnsString} ${sort.order}
            </foreach>
        </if>
        <choose>
            <when test="param.start != null and param.size != null">
                limit #{param.start},#{param.size}
            </when>
            <when test="param.size != null">
                limit #{param.size}
            </when>
        </choose>
        <if test="param.lock == true">
            for update
        </if>
    </select>

    <select id="countPointRecLog" resultType="Long">
        select count(distinct log.id)
        from `${pointTableName}_rec_log` as log
        left join `${pointTableName}_rec` as rec on rec.id = log.recId
        left join `${pointTableName}` as p on rec.pid = p.id
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.orderNoList )">
            left join `${pointTableName}_log` as pLog on log.pid = pLog.pid
            and log.seqNum = pLog.seqNum and pLog.`type` = `log`.`type`
        </if>
        where 1=1
        <if test="param.pid &gt; 0">
            and p.id = #{param.pid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.uid )">
            and p.uid = #{param.uid}
        </if>
        <if test="param.subUid != null">
            and p.subUid = #{param.subUid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.seqNumList )">
            <foreach item="seqNum" collection="param.seqNumList"
                     open="and log.seqNum in (" separator="," close=") ">
                #{seqNum}
            </foreach>
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.recIdList )">
            <foreach item="recId" collection="param.recIdList"
                     open="and log.recId in (" separator="," close=") ">
                #{recId}
            </foreach>
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.tag )">
            and rec.tag = #{param.tag}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.orderNoList )">
            <foreach item="orderNo" collection="param.orderNoList"
                     open="and pLog.orderNo in (" separator="," close=") ">
                #{orderNo}
            </foreach>
        </if>
        <if test="param.enable != null">
            and rec.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + param.sk + '%'"/>
            and (
            rec.tag like #{pattern}
            )
        </if>

    </select>
</mapper>