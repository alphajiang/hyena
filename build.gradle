plugins {
    id 'org.springframework.boot' version '2.6.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'idea'
//apply plugin: 'eclipse'



ext {

    springBootVersion = "2.6.13"
    springCloudVersion = "2021.0.5"
    mybatisStarterVersion = '2.2.2'
//    swaggerVersion = '3.0.0'
//    swaggerAnnotationsVersion = '1.6.2'
    springdocVersion = '1.6.12'
    lombokVersion = '1.18.24'
    ehcacheVersion = '3.8.1'
    commonsPoolVersion = '2.11.1' //apache commons pool. redis pool 需要 https://commons.apache.org/proper/commons-pool/
}


allprojects {
    group = 'io.github.alphajiang'
    version = '0.0.27.20230715.1-SNAPSHOT'
//    version = '0.0.26'
    apply plugin: 'java'
//    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.encoding = "UTF-8"
    }


    test.onlyIf { ! Boolean.getBoolean('skipTests') }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
//        jcenter { url 'https://maven.aliyun.com/repository/jcenter' }
        mavenCentral()
    }
    repositories {
        mavenCentral()
    }



}

bootJar {
    enabled = false
}
jar {
    enabled = false
}



subprojects {

    apply plugin: 'signing'
    apply plugin: 'maven-publish'
//    apply plugin: 'io.spring.dependency-management'


    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        // un-comment the line for release signing
//        sign configurations.archives
    }



    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'hyena'
                    description = 'Micro service for user score hosting. '
                    url = 'https://github.com/alphajiang/hyena'
                    properties = [
                            myProp: "value",
                            "prop.with.dots": "anotherValue"
                    ]
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'alphajiang'
                            name = 'Alpha Jiang'
                            email = 'alphajiang@163.com'
                        }
                    }
                    scm {
                        connection = 'https://github.com/alphajiang/hyena.git'
                        developerConnection = 'https://github.com/alphajiang/hyena.git'
                        url = 'https://github.com/alphajiang/hyena.git'
                    }
                }
                from components.java
            }
//            library(MavenPublication) {
//                from components.java
//            }
        }
        repositories {
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = snapshotRepoUrl
                credentials  {
                    username = ossrhUsername
                    password = ossrhPassword
                }
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

//
//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
//                    authentication(userName: ossrhUsername, password: ossrhPassword)
//                }
//
//                snapshotRepository(url: snapshotRepoUrl) {
//                    authentication(userName: ossrhUsername, password: ossrhPassword)
//                }
//
//                pom.project {
//                    name 'hyena'
//                    packaging 'jar'
//                    // optionally artifactId can be defined here
//                    description 'Micro service for user score hosting. '
//                    url 'https://github.com/alphajiang/hyena'
//
//                    scm {
//                        connection 'https://github.com/alphajiang/hyena.git'
//                        developerConnection 'https://github.com/alphajiang/hyena.git'
//                        url 'https://github.com/alphajiang/hyena.git'
//                    }
//
//                    licenses {
//                        license {
//                            name 'The Apache License, Version 2.0'
//                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
//
//                    developers {
//                        developer {
//                            id 'alphajiang'
//                            name 'Alpha Jiang'
//                            email 'alphajiang@163.com'
//                        }
//                    }
//                }
//            }
//        }
//    }

    dependencies {


        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

        testImplementation('org.junit.jupiter:junit-jupiter:5.7.1')
        testImplementation('org.junit.platform:junit-platform-launcher:1.7.1')
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}"){
            exclude group: 'junit'
        }

//        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
//        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }
}
// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path == ':hyena-core' }

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from = publishedProjects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = publishedProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = publishedProjects.sourceSets.main.output
    executionData jacocoMerge.destinationFile

    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    //onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}